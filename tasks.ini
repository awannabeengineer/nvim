# vim: set fenc=utf-8 ft=dosini:

# define a new task named "file-build"
[file-build]

# shell command, use quotation for filenames containing spaces
# check ":AsyncTaskMacro" to see available macros
command:c=clang "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT).out"
command:cpp=clang++ -std=c++14 "$(VIM_FILEPATH)" -o "$(VIM_FILEDIR)/$(VIM_FILENOEXT).out"
command:go=go build -o "$(VIM_PATHNOEXT)" "$(VIM_FILEPATH)"
command:make=make -f "$(VIM_FILEPATH)"


# output mode, can be one of quickfix and terminal
# - quickfix: output to quickfix window
# - terminal: run the command in the internal terminal
output=terminal

# working directory, can change to $(VIM_ROOT) for project root
cwd=$(VIM_FILEDIR)

# this is for output=quickfix only
# if it is omitted, vim's current errorformat will be used.
# errorformat=%f:%l:%m

# save file before execute
save=2


[file-run]
command="$(VIM_FILEPATH)"
command:c,cpp="$(VIM_PATHNOEXT).out"
command:go="$(VIM_PATHNOEXT)"
command:python="/home/arash/projects/cvnd891/envs/bin/python" "$(VIM_FILENAME)"
command:javascript=node "$(VIM_FILENAME)"
command:sh=sh "$(VIM_FILENAME)"
command:lua=luajit "$(VIM_FILENAME)"
command:perl=perl "$(VIM_FILENAME)"
command:ruby=ruby "$(VIM_FILENAME)"
command:julia=julia "$(VIM_FILENAME)"
# output mode: run in a termianl 
output=termianl
cwd=$(VIM_FILEDIR)
save=2

[task1]
command=echo hello $(?your name), you are a $(gender).
output=terminal
